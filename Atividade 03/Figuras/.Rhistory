# Limpar
rm(list=ls())
#Diretório
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais/Atividade 03/Figuras")
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(urca)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/Atividade%2002/data/passageiros_embarcados.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "pas", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
pas69 <-ts(pas, start=c(1969), frequency = 1)
plot(pas69)
#Teste de Estacionaridade - Dicker Fuller ----
#Variável dependente é um Passeio aleatório
df1<-ur.df(pas69, type = c("none"), lags=0)
summary(df1)
#Variável dependente é um Passeio aleatório com deslocamento
df2<-ur.df(pas69, type = c("drift"), lags=0)
summary(df2)
# Variável dependente é um passeio aleatório com deslocamento em torno de uma tendência estocástica
df3<-ur.df(pas69, type = c("trend"), lags=0)
summary(df3)
# Tirando a primeira diferença da série para torná-la estacionária
dpas<-diff(pas69)
# Refazendo teste de raiz unitária (Dicker-Fuller) para a série diferenciada
# lags = 0 significa que não estamos fazendo o teste ADF
df<-ur.df(dpas, type = c("trend"), lags = 0)
summary(df)
# Essa função indica quantas diferenças são necessárias para que a série se torne estacionária
#pelo resultados anterior chegamos que somente uma diferença já bastava
ndiffs(pas69, test=c("adf"),type=c("trend"), lags=0)
# Plotando os gráficos da série original e transformada lado-a-lado
par(mfrow=c(2,1))
plot(pas69, col="blue", main="Série Original", bty="l",xlab="Ano", ylab="")
plot(dpas, col="blue", main="Série Defasada em um período", bty="l",xlab="Ano", ylab="")
par(mfrow=c(2,1))
plot(pas69, col="blue", main="Série Original", bty="l",xlab="Ano")
plot(dpas, col="blue", main="Série Defasada em um período", bty="l",xlab="Ano")
par(mfrow=c(2,1))
plot(pas69, col="blue", main="Série Original",lab="Ano")
plot(dpas, col="blue", main="Série Defasada em um período", bty="l",xlab="Ano")
par(mfrow=c(2,1))
plot(pas69, col="blue", bty='l',main="Série Original",lab="Ano")
plot(dpas, col="blue", main="Série Defasada em um período", bty="l",xlab="Ano")
par(mfrow=c(2,1))
plot(pas69, col="blue", bty="l",main="Série Original",lab="Ano")
plot(dpas, col="blue", main="Série Defasada em um período", bty="l",xlab="Ano")
par(mfrow=c(2,1))
plot(pas69, col="blue",main="Série Original",xlab="Ano")
plot(dpas, col="blue", main="Série Defasada em um período", bty="l",xlab="Ano")
plot(pas69)
par(mfrow=c(2,1))
plot(pas69, col="blue",main="Série Original",xlab="Ano")
plot(dpas, col="blue", main="Série Defasada em um período", bty="l",xlab="Ano")
par(mfrow=c(3,1))
plot(pas69, col="blue",main="Série Original",xlab="Ano")
plot(dpas, col="blue", main="Série Defasada em um período", bty="l",xlab="Ano")
plot(dpas, col="blue", main="Série Defasada em um período", bty="l",xlab="Ano")
dlpas<-diff((log(pas69)))
par(mfrow=c(3,1))
plot(pas69, col="blue", main="Série Original", bty="l",xlab="Ano", ylab="")
plot(dpas, col="blue", main="Série Defasada em um período", bty="l",xlab="Ano")
plot(dlpas, col="blue", main="Log da Série Defasada em um período", bty="l",xlab="Ano")
dev.copy(pdf,"pas.pdf")
dev.off()
par(mfrow=c(3,1))
plot(pas69, col="blue", main="Série Original", bty="l",xlab="Ano", ylab="")
plot(dpas, col="blue", main="Série Defasada em um período", bty="l",xlab="Ano")
plot(dlpas, col="blue", main="Log da Série Defasada em um período", bty="l",xlab="Ano")
dev.copy(pdf,"pas.pdf")
dev.off()
par(mfrow=c(2,1))
plot(pas69, col="blue", main="Série Original", bty="l",xlab="Ano", ylab="")
plot(dpas, col="blue", main="Série Defasada em um período", bty="l",xlab="Ano", ylab="")
dev.copy(pdf,"pas.pdf")
dev.off()
par(mfrow=c(2,1))
acf(dpas, main="Função de Auto-Correlação", xlab="Defasagem", ylab="")
pacf(dpas, main="Função de Auto-Correlação Parcial", xlab="Defasagem", ylab="")
dev.copy(pdf,"cor.pdf")
dev.off()
model_1<-arima(dpas, order = c(1,0,2))
model_2<-arima(dpas, order = c(1,0,1))
model_3<-arima(dpas, order = c(0,0,2))
model_4<-arima(dpas, order = c(0,0,1))
model_5<-arima(dpas, order = c(1,0,0))
#Critério AIC
#Pelo critério AIC model_5 foi escolhido, logo um MA(1)
AIC(model_1, model_2, model_3, model_4, model_5)
BIC(model_1, model_2, model_3, model_4, model_5)
aic<-AIC(model_1, model_2, model_3, model_4, model_5)
View(aic)
bic<-BIC(model_1, model_2, model_3, model_4, model_5)
inf<-cbind(aic, bic)
View(inf)
print(xtable(inf, caption = "Critérios de Informação AIC e BIC",
label = "tabinf", digits = 2),
caption.placement = "top",
include.rownames = TRUE,
format.args = list(big.mark = ".", decimal.mark = ","))
library(xtable)
print(xtable(inf, caption = "Critérios de Informação AIC e BIC",
label = "tabinf", digits = 2),
caption.placement = "top",
include.rownames = TRUE,
format.args = list(big.mark = ".", decimal.mark = ","))
model_5
t.test(model_5)
install.packages("BETS")
library(BETS)
BETS.t_test(model_5)
install.packages("TSA")
library(TSA)
t_test(model_5)
BETS.t_test(model_5)
help("t_test")
t_test(model_5,1)
t_test(model_1,)
t_test(model_1)
coeftest(model_5)
install.packages("lmtest")
library(lmtest)
coeftest(model_5)
coeftest(model_4,model_5)
help(arima)
coeftest(model_4)
coeftest(model_3)
coeftest(model_2)
coeftest(model_1)
AICc(model_1)
install.packages("stargazer")
library(stargazer)
stargazer(model_1)
stargazer(model_5)
stargazer(model_5, decimal.mark = ".")
stargazer(model_5, decimal.mark = ",")
help("stargazer")
stargazer(model_5, decimal.mark = ",", digit.separator = ".")
stargazer(model_4,model_5, decimal.mark = ",", digit.separator = ".")
model_3
coeftest(model_3)
coeftest(model_1)
coeftest(model_2)
coeftest(model_3)
stargazer(model_1,model_2,model_3 decimal.mark = ",", digit.separator = ".")
stargazer(model_1,model_2,model_3, decimal.mark = ",", digit.separator = ".")
