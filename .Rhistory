modelo<-ets(juros2010, model = "ANN")
# Gerar uma nova série através da Suavização Exponencial Simples (SES)
juros_prev<- modelo$fitted
# Juntar as duas séries - original e suavizada - em uma matriz para formar um gráfico único
graf<-matrix(c(juros_prev, juros2010), nrow = 124, ncol = 2)
colnames(graf)<-c("SES", "Série Original")
graf_ts<-ts(graf)
# Plotar um único gráfico
xyplot(graf_ts, superpose = TRUE)
xyplot(graf_ts, superpose = TRUE, lwd = 1.4)
xyplot(graf_ts, superpose = TRUE, lwd = 5)
xyplot(graf_ts, superpose = TRUE, lwd = 2)
xyplot(graf_ts, superpose = TRUE, lwd = 2, colour=c("blue", "black"))
xyplot(graf_ts, superpose = TRUE, lwd = 2, colour=c(blue, black))
help(xyplot)
xyplot(graf_ts, superpose = TRUE, lwd = 2)
xyplot(graf_ts, superpose = TRUE, lwd = 2, color="white")
xyplot(graf_ts, superpose = TRUE, lwd = 2, color="black")
# Plotar um único gráfico
xyplot(graf_ts, superpose = TRUE, lwd = 2, colors="black")
xyplot(graf_ts, superpose = TRUE, lwd = 2, pch = 2)
# Plotar um único gráfico
xyplot(graf_ts, superpose = TRUE, lwd = 2, pch = 5)
help("panel.xyplot")
xyplot(graf_ts, superpose = TRUE, lwd = 2)
graf_ts<-ts(graf, start=c(2010,1), frequency = 12)
xyplot(graf_ts, superpose = TRUE, lwd = 2)
modelo<-ets(juros2010, model = "ANN", h=5)
modelo<-ets(juros2010, model = "ANN")
juros_ses
juros_ses
View(juros_ses)
juros_ses$x
View(juros_ses)
juros_ses$model$fitted
juros_ses
abc<-data.frame(juros_ses)
View(abc)
View(juros_ses)
juros_prev<- juros_ses[["model"]][["fitted"]]
View(juros_ses)
x<-as.matrix(juros_ses)
View(x)
x[[2]]
x<-data.frame(juros_ses)
View(x)
x<-x[,1]
xy<-rbind(juros_prev,x)
x<-ts(x[,1])
xy<-ts(x)
xyz<-rbind(juros_prev,xy)
xy<-ts(x, start=c(2020,5), frequency = 12)
xyz<-rbind(juros_prev,xy)
View(xyz)
juros_prev<-data.frame(juros_prev)
xy<-rbind(juros_prev,x)
x<-data.frame(juros_ses)
x<-x[,1]
xy<-rbind(juros_prev,x)
x<-data.frame(juros_ses)
x<-x[,1]
x<-data.frame(juros_ses)
x<-data.frame(juros_ses[,1])
x<-data.frame(juros_ses$model)
x<-data.frame(juros_ses)
View(x)
x<-x %>%
select("Point.Forecast")
View(x)
xy<-rbind(juros_prev,x)
View(juros_prev)
rownames(x)
row.names(x)
x<-data.frame(juros_ses, row.names = c(1:3))
View(x)
x<-x %>%
select("Point.Forecast")
xy<-rbind(juros_prev,x)
View(x)
View(juros_prev)
x<-x %>%
select("Point.Forecast") %>%
rename("Point.Forecast"="juros_prev")
x<-x %>%
select("Point.Forecast") %>%
rename("juros_prev"="Point.Forecast")
View(x)
xy<-rbind(juros_prev,x)
View(juros_prev)
View(x)
View(x)
View(juros_prev)
help(rbind)
xy<-rbind(juros_prev,x)
View(juros_prev)
View(modelo)
View(x)
# Limpar
rm(list=ls())
# Carregando pacotes a serem utilizados
library(forecast)
library(lattice)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/Taxa%20de%20juros.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "juros", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
juros74 <-ts(juros, start=c(1974,1), frequency = 12)
# Fazendo um recorte de tempo nos dados a partir de 2010
juros2010<- window(juros74, start=2010)
# Plotando o gráfico da série
plot(juros2010)
# Aplicando a suavização exponencial simples
juros_ses<-ses(juros2010, level = 95, h=3)
plot(juros_ses)
# Gerar uma nova série através da Suavização Exponencial Simples (SES)
juros_prev<- juros_ses[["model"]][["fitted"]]
juros_prev<-data.frame(juros_prev)
#Retirando os valores previstos da SES para fora da amostra
x<-data.frame(juros_ses, row.names = c(1:3))
x<-x %>%
select("Point.Forecast") %>%
rename("juros_prev"="Point.Forecast")
xy<-rbind(juros_prev,x)
xy<-cbind(juros_prev,x)
xy<-rbind("juros_prev","x")
View(xy)
xy<-rbind(juros_prev,x)
View(x)
View(juros_prev)
xy<-rbind.data.frame(juros_prev,x)
rbind(juros_prev,x)
rbind(c(juros_prev,x))
ola<-rbind(c(juros_prev,x))
View(ola)
bind_rows(juros_prev, x)
length(juros_prev)
len(juros_prev[])
View(juros_prev)
juros_prev<-bind_rows(juros_prev, x)
View(juros_prev)
length(juros_prev)
juros_prev
nrow(juros_prev)
graf<-matrix(c(juros_prev, juros2010), nrow = nrow(juros_prev), ncol = 2)
View(graf)
juros_prev<-as.vector(juros_prev)
juros_prev<-as.vector(juros_prev)
juros_prev<-as.vector(juros_prev)
View(juros_prev)
juros_prev<-as.vector(juros_prev)
juros2010<-data.frame(juros2010)
View(juros2010)
graf<-cbind(juros2010, juros_prev)
NA<-c(NA, NA, NA)
xyq<c(,,,)
xyq<c(1,,,)
xyq<-c(1,,,)
xyq<-c(1,2)
xyq<-c(1,NA)
xyq<-c(NA,NA)
nulo<-data.frame(nulo)
nulo<-c(NA,NA,NA)
nulo<-data.frame(nulo)
View(nulo)
juros2010<-rbind(juros2010, nulo)
juros2010<-bind_rows(juros2010, nulo)
View(juros2010)
juros2010<-data.frame(juros2010)
nulo<-c(NA,NA,NA)
nulo<-data.frame(nulo)
juros2010<-bind_rows(juros2010, nulo)
View(juros2010)
juros2010<-data.frame(juros2010)
nulo<-c(NA,NA,NA)
nulo<-data.frame(nulo, colnames=c("juros2010")
juros2010<-data.frame(juros2010)
nulo<-c(NA,NA,NA)
nulo<-data.frame(nulo, colnames=c("juros2010"))
juros2010<-data.frame(juros2010)
nulo<-c(NA,NA,NA)
nulo<-data.frame(nulo, colnames=c("juros2010"))
View(nulo)
juros2010<-data.frame(juros2010)
nulo<-c(NA,NA,NA)
nulo<-data.frame(nulo)
nulo<-nulo %>%
rename("juros2010"="nulo")
View(nulo)
View(juros2010)
# Limpar
rm(list=ls())
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/Taxa%20de%20juros.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "juros", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
juros74 <-ts(juros, start=c(1974,1), frequency = 12)
# Fazendo um recorte de tempo nos dados a partir de 2010
juros2010<- window(juros74, start=2010)
# Plotando o gráfico da série
plot(juros2010)
# Aplicando a suavização exponencial simples
juros_ses<-ses(juros2010, level = 95, h=3)
plot(juros_ses)
# Gerar uma nova série através da Suavização Exponencial Simples (SES)
juros_prev<- juros_ses[["model"]][["fitted"]]
juros_prev<-data.frame(juros_prev)
#Retirando os valores previstos da SES para fora da amostra
x<-data.frame(juros_ses, row.names = c(1:3))
x<-x %>%
select("Point.Forecast") %>%
rename("juros_prev"="Point.Forecast")
juros_prev<-bind_rows(juros_prev, x)
# Juntar as duas séries - original e suavizada - em uma matriz para formar um gráfico único
juros2010<-data.frame(juros2010)
nulo<-c(NA,NA,NA)
nulo<-data.frame(nulo)
nulo<-nulo %>%
rename("juros2010"="nulo")
View(juros2010)
juros2010<-bind_rows(juros2010, nulo)
graf<-cbind(juros2010, juros_prev)
View(graf)
colnames(graf)<-c("SES", "Série Original")
View(graf)
colnames(graf)<-c("Série Original", "SES")
View(graf)
View(graf)
graf_ts<-ts(graf, start=c(2010,1), frequency = 12)
xyplot(graf_ts, superpose = TRUE, lwd = 2)
# Limpar
rm(list=ls())
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/Taxa%20de%20juros.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "juros", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
juros74 <-ts(juros, start=c(1974,1), frequency = 12)
# Fazendo um recorte de tempo nos dados a partir de 2010
juros2010<- window(juros74, start=2010)
# Plotando o gráfico da série
plot(juros2010)
# Aplicando a suavização exponencial simples
juros_ses<-ses(juros2010, level = 95, h=10)
plot(juros_ses)
# Gerar uma nova série através da Suavização Exponencial Simples (SES)
juros_prev<- juros_ses[["model"]][["fitted"]]
juros_prev<-data.frame(juros_prev)
#Retirando os valores previstos da SES para fora da amostra
x<-data.frame(juros_ses, row.names = c(1:10))
x<-x %>%
select("Point.Forecast") %>%
rename("juros_prev"="Point.Forecast")
juros_prev<-bind_rows(juros_prev, x)
# Juntar as duas séries - original e suavizada - em uma matriz para formar um gráfico único
juros2010<-data.frame(juros2010)
nulo<-c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)
nulo<-data.frame(nulo)
nulo<-nulo %>%
rename("juros2010"="nulo")
juros2010<-bind_rows(juros2010, nulo)
graf<-cbind(juros2010, juros_prev)
colnames(graf)<-c("Série Original", "SES")
graf_ts<-ts(graf, start=c(2010,1), frequency = 12)
# Plotar um único gráfico
xyplot(graf_ts, superpose = TRUE, lwd = 2)
agua<-c(10*NA)
rep(NA,10)
agua<-rep(NA, 10)
agua<-c(rep(NA, 10))
# Limpar
rm(list=ls())
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/Taxa%20de%20juros.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "juros", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
juros74 <-ts(juros, start=c(1974,1), frequency = 12)
# Fazendo um recorte de tempo nos dados a partir de 2010
juros2010<- window(juros74, start=2010)
# Plotando o gráfico da série
plot(juros2010)
# Aplicando a suavização exponencial simples
juros_ses<-ses(juros2010, level = 95, h=10)
plot(juros_ses)
# Gerar uma nova série através da Suavização Exponencial Simples (SES)
juros_prev<- juros_ses[["model"]][["fitted"]]
juros_prev<-data.frame(juros_prev)
#Retirando os valores previstos da SES para fora da amostra
x<-data.frame(juros_ses, row.names = c(1:10))
x<-x %>%
select("Point.Forecast") %>%
rename("juros_prev"="Point.Forecast")
juros_prev<-bind_rows(juros_prev, x)
# Juntar as duas séries - original e suavizada - em uma matriz para formar um gráfico único
juros2010<-data.frame(juros2010)
nulo<-c(rep(NA,10)) # é necessário criar um vetor nulo
nulo<-data.frame(nulo)
nulo<-nulo %>%
rename("juros2010"="nulo")
juros2010<-bind_rows(juros2010, nulo)
graf<-cbind(juros2010, juros_prev)
colnames(graf)<-c("Série Original", "SES")
graf_ts<-ts(graf, start=c(2010,1), frequency = 12)
# Plotar um único gráfico
xyplot(graf_ts, superpose = TRUE, lwd = 2)
# Limpar
rm(list=ls())
#Diretório
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais")
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/Taxa%20de%20juros.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "juros", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
juros74 <-ts(juros, start=c(1974,1), frequency = 12)
# Fazendo um recorte de tempo nos dados a partir de 2010
juros2010<- window(juros74, start=2010)
# Plotando o gráfico da série
plot(juros2010)
# Aplicando a suavização exponencial simples
juros_ses<-ses(juros2010, level = 95, h=10)
plot(juros_ses)
# Gerar uma nova série através da Suavização Exponencial Simples (SES)
juros_prev<- juros_ses[["model"]][["fitted"]]
juros_prev<-data.frame(juros_prev)
#Retirando os valores previstos da SES para fora da amostra
x<-data.frame(juros_ses, row.names = c(1:10))
x<-x %>%
select("Point.Forecast") %>%
rename("juros_prev"="Point.Forecast")
juros_prev<-bind_rows(juros_prev, x)
# Juntar as duas séries - original e suavizada - em uma matriz para formar um gráfico único
juros2010<-data.frame(juros2010)
# é necessário criar um vetor nulo pra completar a série original
# a repetição é de acordo com o número de períodos a ser previsto
nulo<-c(rep(NA,10))
nulo<-data.frame(nulo)
nulo<-nulo %>%
rename("juros2010"="nulo")
juros2010<-bind_rows(juros2010, nulo)
graf<-cbind(juros2010, juros_prev)
colnames(graf)<-c("Série Original", "SES")
# Retornando para o formato temporal
graf_ts<-ts(graf, start=c(2010,1), frequency = 12)
# Plotar um único gráfico
xyplot(graf_ts, superpose = TRUE, lwd = 2)
dev.copy(pdf,"juros")
dev.off()
help(ses)
# Limpar
rm(list=ls())
#Diretório
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais")
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/Taxa%20de%20juros.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "juros", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
juros74 <-ts(juros, start=c(1974,1), frequency = 12)
# Fazendo um recorte de tempo nos dados a partir de 2010
juros2010<- window(juros74, start=2010)
# Plotando o gráfico da série
plot(juros2010)
# Aplicando a suavização exponencial simples
juros_ses<-holt(juros2010, level = 95, h=10)
plot(juros_ses)
# Gerar uma nova série através da Suavização Exponencial Simples (SES)
juros_prev<- juros_ses[["model"]][["fitted"]]
juros_prev<-data.frame(juros_prev)
#Retirando os valores previstos da SES para fora da amostra
x<-data.frame(juros_ses, row.names = c(1:10))
x<-x %>%
select("Point.Forecast") %>%
rename("juros_prev"="Point.Forecast")
juros_prev<-bind_rows(juros_prev, x)
# Juntar as duas séries - original e suavizada - em uma matriz para formar um gráfico único
juros2010<-data.frame(juros2010)
# é necessário criar um vetor nulo pra completar a série original
# a repetição é de acordo com o número de períodos a ser previsto
nulo<-c(rep(NA,10))
nulo<-data.frame(nulo)
nulo<-nulo %>%
rename("juros2010"="nulo")
juros2010<-bind_rows(juros2010, nulo)
graf<-cbind(juros2010, juros_prev)
colnames(graf)<-c("Série Original", "SES")
# Retornando para o formato temporal
graf_ts<-ts(graf, start=c(2010,1), frequency = 12)
# Plotar um único gráfico
xyplot(graf_ts, superpose = TRUE, lwd = 2)
xyplot(graf_ts, superpose = TRUE, lwd = 2)
dev.copy(pdf,"juros.pdf")
dev.off()
Limpar
rm(list=ls())
#Diretório
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais")
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/Taxa%20de%20juros.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "juros", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
juros74 <-ts(juros, start=c(1974,1), frequency = 12)
# Fazendo um recorte de tempo nos dados a partir de 2010
juros2010<- window(juros74, start=2010)
# Plotando o gráfico da série
plot(juros2010)
# Aplicando a suavização exponencial simples
juros_ses<-ses(juros2010, level = 95, h=10)
plot(juros_ses)
# Gerar uma nova série através da Suavização Exponencial Simples (SES)
juros_prev<- juros_ses[["model"]][["fitted"]]
juros_prev<-data.frame(juros_prev)
#Retirando os valores previstos da SES para fora da amostra
x<-data.frame(juros_ses, row.names = c(1:10))
x<-x %>%
select("Point.Forecast") %>%
rename("juros_prev"="Point.Forecast")
juros_prev<-bind_rows(juros_prev, x)
# Juntar as duas séries - original e suavizada - em uma matriz para formar um gráfico único
juros2010<-data.frame(juros2010)
# é necessário criar um vetor nulo pra completar a série original
# a repetição é de acordo com o número de períodos a ser previsto
nulo<-c(rep(NA,10))
nulo<-data.frame(nulo)
nulo<-nulo %>%
rename("juros2010"="nulo")
juros2010<-bind_rows(juros2010, nulo)
graf<-cbind(juros2010, juros_prev)
colnames(graf)<-c("Série Original", "SES")
# Retornando para o formato temporal
graf_ts<-ts(graf, start=c(2010,1), frequency = 12)
# Plotar um único gráfico
xyplot(graf_ts, superpose = TRUE, lwd = 2)
dev.copy(pdf,"juros.pdf")
dev.off()
# Limpar
rm(list=ls())
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/PIB.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("ano", "mes", "pib"))
# Configurando os dados para o formato de séries temporais
attach(dados)
pib90 <-ts(pib, start=c(1990,1), frequency = 12)
# Fazendo um recorte de tempo nos dados a partir de 2000
pib2000<- window(pib90, start=2000)
# Plotando o gráfico da série
plot(pib2000)
pib2010<- window(pib90, start=2010)
plot(pib2010)
pib_holt<-holt(pib2010, level = 95, h=10)
plot(pib_holt)
# Gerar uma nova série através da Suavização Exponencial Simples (SES)
pib_prev<- pib_holt[["model"]][["fitted"]]
pib_prev<-data.frame(pib_prev)
x<-data.frame(pib_holt, row.names = c(1:10))
x<-x %>%
select("Point.Forecast") %>%
rename("pib_prev"="Point.Forecast")
pib_prev<-bind_rows(pib_prev, x)
pib2010<-data.frame(pib2010)
# é necessário criar um vetor nulo pra completar a série original
# a repetição é de acordo com o número de períodos a ser previsto
nulo<-c(rep(NA,10))
nulo<-data.frame(nulo)
nulo<-nulo %>%
rename("pib2010"="nulo")
pib2010<-bind_rows(pib2010, nulo)
graf<-cbind(pib2010, pib_prev)
colnames(graf)<-c("Série Original", "SEH")
# Retornando para o formato temporal
graf_ts<-ts(graf, start=c(2010,1), frequency = 12)
# Plotar um único gráfico
xyplot(graf_ts, superpose = TRUE, lwd = 2)
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais")
xyplot(graf_ts, superpose = TRUE, lwd = 2)
dev.copy(pdf,"pib.pdf")
dev.off()
