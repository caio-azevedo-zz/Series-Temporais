# Limpar
rm(list=ls())
#Diretório
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais/Atividade 03/Figuras")
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(urca)
library(xtable)
library(stargazer)
library(FinTS)
library(normtest)
library(lmtest)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/Atividade%2002/data/passageiros_embarcados.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "pas", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
pas69 <-ts(pas, start=c(1969), frequency = 1)
#Teste de Estacionaridade - Dicker Fuller ----
#Variável dependente é um Passeio aleatório
df1<-ur.df(pas69, type = c("none"), lags=0)
summary(df1)
#Variável dependente é um Passeio aleatório com deslocamento
df2<-ur.df(pas69, type = c("drift"), lags=0)
summary(df2)
# Variável dependente é um passeio aleatório com deslocamento em torno de uma tendência estocástica
df3<-ur.df(pas69, type = c("trend"), lags=0)
summary(df3)
# Tirando a primeira diferença da série para torná-la estacionária
dpas<-diff(pas69)
# Refazendo teste de raiz unitária (Dicker-Fuller) para a série diferenciada
# lags = 0 significa que não estamos fazendo o teste ADF
df<-ur.df(diff(pas69), type = c("trend"), lags = 0)
summary(df)
# Essa função indica quantas diferenças são necessárias para que a série se torne estacionária
#pelo resultados anterior chegamos que somente uma diferença já bastava
ndiffs(pas69, test=c("adf"),type=c("trend"), lags=0)
# Plotando os gráficos da série original e transformada lado-a-lado
par(mfrow=c(2,1))
plot(pas69, col="blue", main="Série Original", bty="l",xlab="Ano", ylab="")
plot(diff(pas69), col="blue", main="Série Defasada em um período", bty="l",xlab="Ano", ylab="")
dev.copy(pdf,"pas.pdf")
dev.off()
# Identificação do Modelo através dos Correlogramas
par(mfrow=c(2,1))
acf(diff(pas69), main="Função de Auto-Correlação", xlab="Defasagem", ylab="")
pacf(diff(pas69), main="Função de Auto-Correlação Parcial", xlab="Defasagem", ylab="")
dev.copy(pdf,"cor.pdf")
dev.off()
# Escolher a ordem do modelo em c(p,d,q)
model_1<-Arima(pas69, order = c(1,1,2), include.drift = TRUE)
model_2<-Arima(pas69, order = c(1,1,1),include.drift = TRUE)
model_3<-Arima(pas69, order = c(0,1,2),include.drift = TRUE)
model_4<-Arima(pas69, order = c(0,1,1),include.drift = TRUE)
model_5<-Arima(pas69, order = c(1,1,0),include.drift = TRUE, method=c("ML"))
model_1<-Arima(pas69, order = c(1,1,2), include.drift = TRUE, method=c("ML"))
model_2<-Arima(pas69, order = c(1,1,1),include.drift = TRUE, method=c("ML"))
model_3<-Arima(pas69, order = c(0,1,2),include.drift = TRUE, method=c("ML"))
model_4<-Arima(pas69, order = c(0,1,1),include.drift = TRUE, method=c("ML"))
model_5<-Arima(pas69, order = c(1,1,0),include.drift = TRUE, method=c("ML"))
aic<-AIC(model_1, model_2, model_3, model_4, model_5)
#Critério BIC
# Igualmente ao critério AIC, o BIC sugeriu um MA(1)
bic<-BIC(model_1, model_2, model_3, model_4, model_5)
#Juntando os dois critérios e exportando em Latex
inf<-cbind(aic, bic)
tsdiag(model_5)
dev.copy(pdf,"diag5.pdf")
dev.off()
tsdiag(model_4)
dev.copy(pdf,"diag4.pdf")
dev.off()
par(mfrow=c(2,1))
plot(density(model_5$residuals, kernel = c("gaussian")),
main="Modelo ARIMA(1,1,0)", xlab="", ylab="")
plot(density(model_4$residuals, kernel = c("gaussian")),
main="Modelo ARIMA(0,1,1)", xlab="", ylab="")
dev.copy(pdf,"den5.pdf")
dev.off()
par(mfrow=c(2,1))
plot(forecast(model_5, h=5, level=0.95),main="Modelo ARIMA(1,1,0)", xlab="Ano", ylab="")
plot(forecast(model_4, h=5, level=0.95),main="Modelo ARIMA(0,1,1)", xlab="Ano", ylab="")
dev.copy(pdf,"prev.pdf")
dev.off()
par(mfrow=c(1,2))
boxplot(model_5$residuals, main="Modelo ARIMA(1,1,0)")
boxplot(model_4$residuals, main="Modelo ARIMA(0,1,1)")
dev.copy(pdf,"boxplot.pdf")
dev.off()
View(model_5)
model_5[["fitted"]]
a<-forecast(model_5, h=1, level=0.95)
a
View(a)
a[["residuals"]]
a[["model"]][["coef"]][["drift"]]
a[["model"]]
model_5<-Arima(pas69, order = c(1,1,0),include.drift = TRUE)
a<-forecast(model_5, h=1, level=0.95)
a
View(a)
a[["model"]][["coef"]]
a
a[["method"]]
a[["model"]][["xreg"]]
a[["mean"]]
a<-forecast(model_5, h=2, level=0.95)
a
View(model_5)
model_5[["model"]][["a"]]
model_5[["model"]][["Pn"]]
a<-forecast(model_5, h=5, level=0.95)
a
model_5[["model"]][["P"]]
model_5[["model"]][["Pn"]]
