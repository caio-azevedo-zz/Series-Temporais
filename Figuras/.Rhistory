base <- read.table("base.csv", header = TRUE,sep = ",",dec=".",
fileEncoding = "latin1")
base<-base %>%
select(-m,-di,-tratado,-periodo)
base<-base[complete.cases(base),]
base<-base %>%
mutate(condicao=ifelse(condicao=="mandante",1,0)) %>%
mutate(derrota=1-vit) %>%
mutate(int=derrota*condicao)
View(base)
logit <- glm(trocou ~ cum_surpresa + pts_4 + int+ diff_gols + pos_adv_rodada,
family = binomial(link = "logit"),
data = base)
summary(logit)
logit <- glm(trocou ~ cum_surpresa + pts_4 + int+ diff_gols + pos_adv_rodada + condicao + derrota,
family = binomial(link = "logit"),
data = base)
summary(logit)
logit <- glm(trocou ~ cum_surpresa + pts_4 + int+ diff_gols + pos_adv_rodada,
family = binomial(link = "logit"),
data = base)
lrm(formula = trocou ~ cum_surpresa + pts_4 + int+ diff_gols + pos_adv_rodada,
data = base)
lrm(formula = trocou ~ cum_surpresa + pts_4 + derrota + diff_gols + pos_adv_rodada + condicao,
data = base)
logit <- glm(trocou ~ cum_surpresa + pts_4 + int+ diff_gols + pos_adv_rodada,
family = binomial(link = "logit"),
data = base)
probit <- glm(trocou ~ cum_surpresa + pts_4 + int + diff_gols + pos_adv_rodada,
family = binomial(link = "probit"),
data = base)
stargazer(logit,probit)
View(base)
setwd("C:/Users/Caio Azevedo/Documents")
write.table(base,file='base.csv',sep=',',na="",quote=TRUE, row.names=FALSE)
setwd("C:/Users/Caio Azevedo/Dropbox/cb_demissao_tecnico/Caio/data")
#Carregamento e configuração dos dados----
base <- read.table("base.csv", header = TRUE,sep = ",",dec=".",
fileEncoding = "latin1")
base<-base %>%
select(-m,-di,-tratado,-periodo)
base<-base[complete.cases(base),]
base<-base %>%
mutate(condicao=ifelse(condicao=="mandante",1,0)) %>%
mutate(derrota=1-vit) %>%
mutate(int=derrota*condicao)
setwd("C:/Users/Caio Azevedo/Documents")
write.table(base,file='base.csv',sep=',',na="",quote=TRUE, row.names=FALSE)
base <- read.table("base.csv", header = TRUE,sep = ",",dec=".",
fileEncoding = "latin1")
base<-base %>%
select(-m,-di,-tratado,-periodo)
base<-base[complete.cases(base),]
base<-base %>%
mutate(condicao=ifelse(condicao=="mandante",1,0)) %>%
mutate(derrota=1-vit) %>%
mutate(interaction=derrota*condicao)
setwd("C:/Users/Caio Azevedo/Documents")
write.table(base,file='base.csv',sep=',',na="",quote=TRUE, row.names=FALSE)
View(base)
base <- read.table("base.csv", header = TRUE,sep = ",",dec=".",
fileEncoding = "latin1")
base<-base %>%
select(-m,-di,-tratado,-periodo)
base <- read.table("base.csv", header = TRUE,sep = ",",dec=".",
fileEncoding = "latin1")
base<-base %>%
select(-m,-di,-tratado,-periodo)
setwd("C:/Users/Caio Azevedo/Dropbox/cb_demissao_tecnico/Caio/data")
#Carregamento e configuração dos dados----
base <- read.table("base.csv", header = TRUE,sep = ",",dec=".",
fileEncoding = "latin1")
base<-base %>%
select(-m,-di,-tratado,-periodo)
base<-base[complete.cases(base),]
base<-base %>%
mutate(condicao=ifelse(condicao=="mandante",1,0)) %>%
mutate(derrota=1-vit) %>%
mutate(interaction=derrota*condicao)
setwd("C:/Users/Caio Azevedo/Documents")
write.table(base,file='base.csv',sep=',',na="",quote=TRUE, row.names=FALSE)
View(base)
logit <- glm(trocou ~ cum_surpresa + pts_4 + derrota + condicao + diff_gols + pos_adv_rodada,
family = binomial(link = "logit"),
data = base)
probit <- glm(trocou ~ cum_surpresa + pts_4 + derrota + condicao + diff_gols + pos_adv_rodada,
family = binomial(link = "probit"),
data = base)
stargazer(logit,probit)
5=5
5!=5
# Limpar
rm(list=ls())
#Diretório
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais/Figuras")
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/Taxa%20de%20juros.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "juros", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
juros74 <-ts(juros, start=c(1974,1), frequency = 12)
# Fazendo um recorte de tempo nos dados a partir de 2010
juros2010<- window(juros74, start=2010)
# Plotando o gráfico da série
plot(juros2010)
juros_holt<-holt(juros2010, level = 95, h=10)
plot(juros_ses)
plot(juros_holt)
# Limpar
rm(list=ls())
#Diretório
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais/Figuras")
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/passageiros_embarcados.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "pas", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
pas69 <-ts(pas, start=c(1969), frequency = 1)
View(dados)
# Limpar
rm(list=ls())
#Diretório
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais/Figuras")
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/passageiros_embarcados.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "pas"))
# Limpar
rm(list=ls())
#Diretório
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais/Figuras")
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/passageiros_embarcados.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "pas", ""))
attach(dados)
pas69 <-ts(pas, start=c(1969), frequency = 1)
pas_holt<-holt(pas69, level = 95, h=10)
plot(pas_holt)
# Gerar uma nova série através da Suavização Exponencial de Holt (SEH)
pas_prev<- pas_holt[["model"]][["fitted"]]
pas_prev<-data.frame(pas_prev)
#Retirando os valores previstos da SEH para fora da amostra
x<-data.frame(pas_holt, row.names = c(1:10))
x<-x %>%
select("Point.Forecast") %>%
rename("pas_prev"="Point.Forecast")
pas_prev<-bind_rows(pas_prev, x)
View(x)
pas69<-data.frame(pas69)
# é necessário criar um vetor nulo pra completar a série original
# a repetição é de acordo com o número de períodos a ser previsto
nulo<-c(rep(NA,10))
nulo<-data.frame(nulo)
nulo<-nulo %>%
rename("pas69"="nulo")
pas69<-bind_rows(pas69, nulo)
graf<-cbind(pas69, pas_prev)
colnames(graf)<-c("Série Original", "Holt")
graf_ts<-ts(graf, start=c(1969), frequency = 1)
xyplot(graf_ts, superpose = TRUE, lwd = 2)
dev.copy(pdf,"pas.pdf")
dev.off()
# Limpar
rm(list=ls())
#Diretório
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais/Figuras")
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/passageiros_embarcados.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "pas", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
pas69 <-ts(pas, start=c(1969), frequency = 1)
plot(pas69)
dev.copy(pdf,"pas69.pdf")
dev.off()
# Aplicando a suavização exponencial de Holt
pas_holt<-holt(pas69, level = 95, h=10)
plot(pas_holt)
# Gerar uma nova série através da Suavização Exponencial de Holt (SEH)
pas_prev<- pas_holt[["model"]][["fitted"]]
pas_prev<-data.frame(pas_prev)
#Retirando os valores previstos da SEH para fora da amostra
x<-data.frame(pas_holt, row.names = c(1:10))
x<-x %>%
select("Point.Forecast") %>%
rename("pas_prev"="Point.Forecast")
pas_prev<-bind_rows(pas_prev, x)
# Juntar as duas séries - original e suavizada - em uma matriz para formar um gráfico único
pas69<-data.frame(pas69)
# é necessário criar um vetor nulo pra completar a série original
# a repetição é de acordo com o número de períodos a ser previsto
nulo<-c(rep(NA,10))
nulo<-data.frame(nulo)
nulo<-nulo %>%
rename("pas69"="nulo")
pas69<-bind_rows(pas69, nulo)
graf<-cbind(pas69, pas_prev)
colnames(graf)<-c("Série Original", "Holt")
# Retornando para o formato temporal
graf_ts<-ts(graf, start=c(1969), frequency = 1)
# Plotar um único gráfico
xyplot(graf_ts, superpose = TRUE, lwd = 2)
dev.copy(pdf,"pas.pdf")
dev.off()
View(pas_prev)
View(pas_holt)
pas_holt[["model"]][["par"]]
pas_holt[["model"]][["initstate"]]
parametros<-data.frame(round(pas_holt[["model"]][["par"]], digits = 4))
parametros<-data.frame(parametros[1:2,])
colnames(parametros)<-c("Parâmetros estimados")
rownames(parametros)<-c("alpha", "beta")
View(parametros)
estado_inic<-data.frame(round(pas_holt[["model"]][["initstate"]], digits = 2))
colnames(estado_inic)<-c("Estados Iniciais")
View(estado_inic)
pas_holt[["model"]]
View(pas_holt)
holt<-data.frame(pas_holt)
View(holt)
loglik <- pib_hw[["model"]][["loglik"]]
aic <- pib_hw[["model"]][["aic"]]
bic <- pib_hw[["model"]][["bic"]]
aicc <- pib_hw[["model"]][["aicc"]]
mse <- pib_hw[["model"]][["mse"]]
amse <- pib_hw[["model"]][["amse"]]
inf_crit<-data.frame(c(loglik, aic, bic, aicc, mse, amse))
colnames(inf_crit)<-c("Critérios de Informação")
rownames(inf_crit)<-c("LogLik", "AIC", "BIC", "AICC", "MSE", "AMSE")
loglik <- pas_holt[["model"]][["loglik"]]
aic <- pas_holt[["model"]][["aic"]]
bic <- pas_holt [["model"]][["bic"]]
aicc <- pas_holt[["model"]][["aicc"]]
mse <- pas_holt[["model"]][["mse"]]
amse <- pas_holt[["model"]][["amse"]]
inf_crit<-data.frame(c(loglik, aic, bic, aicc, mse, amse))
colnames(inf_crit)<-c("Critérios de Informação")
rownames(inf_crit)<-c("LogLik", "AIC", "BIC", "AICC", "MSE", "AMSE")
holt<-data.frame(pas_holt)
print(xtable(holt, caption = "Previsão para a quantidade de passageiros embarcados
através do Modelo de Holt",
label = "tab2.4"),
caption.placement = "top",
include.rownames = TRUE,
format.args = list(big.mark = ".", decimal.mark = ","))
library(xtable)
holt<-data.frame(pas_holt)
print(xtable(holt, caption = "Previsão para a quantidade de passageiros embarcados
através do Modelo de Holt",
label = "tab2.4"),
caption.placement = "top",
include.rownames = TRUE,
format.args = list(big.mark = ".", decimal.mark = ","))
holt<-data.frame(pas_holt, digits=0)
print(xtable(holt, caption = "Previsão para a quantidade de passageiros embarcados
através do Modelo de Holt",
label = "tab2.4"),
caption.placement = "top",
include.rownames = TRUE,
format.args = list(big.mark = ".", decimal.mark = ","))
print(xtable(holt, caption = "Previsão para a quantidade de passageiros embarcados
através do Modelo de Holt",
label = "tab2.4", digits=0),
caption.placement = "top",
include.rownames = TRUE,
format.args = list(big.mark = ".", decimal.mark = ","))
print(xtable(holt, caption = "Previsão para a quantidade de passageiros embarcados
através do Modelo de Holt",
label = "tab2.4"),
caption.placement = "top",
include.rownames = TRUE,
format.args = list(big.mark = ".", decimal.mark = ","))
print(xtable(holt, caption = "Previsão para a quantidade de passageiros embarcados
através do Modelo de Holt",
label = "tab2.4"),
caption.placement = "top",
include.rownames = TRUE, digits = 0,
format.args = list(big.mark = ".", decimal.mark = ","))
print(xtable(holt, caption = "Previsão para a quantidade de passageiros embarcados
através do Modelo de Holt", digits = 0,
label = "tab2.4"),
caption.placement = "top",
include.rownames = TRUE,
format.args = list(big.mark = ".", decimal.mark = ","))
holt<-data.frame(round(pas_holt),digits=0)
print(xtable(holt, caption = "Previsão para a quantidade de passageiros embarcados
através do Modelo de Holt",
label = "tab2.4"),
caption.placement = "top",
include.rownames = TRUE,
format.args = list(big.mark = ".", decimal.mark = ","))
holt<-data.frame(round(pas_holt, digits = 0))
print(xtable(holt, caption = "Previsão para a quantidade de passageiros embarcados
através do Modelo de Holt",
label = "tab2.4"),
caption.placement = "top",
include.rownames = TRUE,
format.args = list(big.mark = ".", decimal.mark = ","))
holt<-data.frame(pas_holt)
View(holt)
help(xtable)
print(xtable(holt, caption = "Previsão para a quantidade de passageiros embarcados
através do Modelo de Holt",
label = "tab2.4", digits = 0),
caption.placement = "top",
include.rownames = TRUE,
format.args = list(big.mark = ".", decimal.mark = ","))
print(xtable(estado_inic, caption = "Estados Iniciais utilizados na Previsão da SEH",
label = "tab2.2", digits = 0),
caption.placement = "top",
include.rownames = TRUE,
format.args = list(big.mark = ".", decimal.mark = ","))
View(parametros)
print(xtable(inf_crit, caption = "Critérios de Informação da SEH",
label = "tab2.3"),
caption.placement = "top",
include.rownames = TRUE,
format.args = list(big.mark = ".", decimal.mark = ","))
# Limpar----
rm(list=ls())
# Limpar----
rm(list=ls())
#Diretório
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais/Figuras")
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
library(xtable)
library(stargazer)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/energia.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "cons", ""))
View(dados)
# Configurando os dados para o formato de séries temporais
attach(dados)
cons76 <-ts(pib, start=c(1976,1), frequency = 12)
cons76 <-ts(cons, start=c(1976,1), frequency = 12)
View(dados)
plot(cons76)
cons2005<- window(cons76, start=2005)
plot(cons2005)
cons2005<- window(cons76, start=2010)
plot(cons2005)
cons2005<- window(cons76, start=2012)
plot(cons2005)
cons2012<- window(cons76, start=2012)
plot(cons2012)
cons_ses<-ses(cons2012, level = 95, h=10)
plot(cons_ses)
View(cons_ses)
cons_ses[["model"]][["fitted"]]
cons_prev<- cons_ses[["model"]][["fitted"]]
cons_prev<-data.frame(cons_prev)
x<-data.frame(cons_ses, row.names = c(1:10))
x<-x %>%
select("Point.Forecast") %>%
rename("pib_prev"="Point.Forecast")
cons_prev<-bind_rows(cons_prev, x)
cons2015<-data.frame(cons2015)
cons2012<-data.frame(cons2012)
nulo<-c(rep(NA,10))
nulo<-data.frame(nulo)
nulo<-nulo %>%
rename("pib2010"="nulo")
cons2012<-bind_rows(cons2012, nulo)
graf<-cbind(cons2012, cons_prev)
colnames(graf)<-c("Série Original", "SES")
graf_ts<-ts(graf, start=c(2012,1), frequency = 12)
# Plotar um único gráfico----
xyplot(graf_ts, superpose = TRUE, lwd = 2)
library(forecast)
library(dplyr)
library(lattice)
library(xtable)
library(stargazer)
xyplot(graf_ts, superpose = TRUE, lwd = 2)
View(graf_ts)
View(graf)
View(cons2012)
# Limpar----
rm(list=ls())
#Diretório
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais/Figuras")
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
library(xtable)
library(stargazer)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/energia.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "cons", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
cons76 <-ts(cons, start=c(1976,1), frequency = 12)
plot(cons76)
dev.copy(pdf,"cons76.pdf")
dev.off()
# Fazendo um recorte de tempo nos dados a partir de 2012
cons2012<- window(cons76, start=2012)
# Plotando o gráfico da série
plot(cons2012)
dev.copy(pdf,"cons2012.pdf")
dev.off()
# Aplicando a Suavização de Holt - Winters erros aditivos----
cons_ses<-ses(cons2012, level = 95, h=10)
plot(cons_ses)
# Gerar uma nova série através da Suavização Exponencial Simples (SES)
cons_prev<- cons_ses[["model"]][["fitted"]]
cons_prev<-data.frame(cons_prev)
#Retirando os valores previstos da SES para fora da amostra----
x<-data.frame(cons_ses, row.names = c(1:10))
x<-x %>%
select("Point.Forecast") %>%
rename("pib_prev"="Point.Forecast")
cons_prev<-bind_rows(cons_prev, x)
# Juntar as duas séries - original e suavizada - em uma matriz para formar um gráfico único
cons2012<-data.frame(cons2012)
# é necessário criar um vetor nulo pra completar a série original
# a repetição é de acordo com o número de períodos a ser previsto
nulo<-c(rep(NA,10))
nulo<-data.frame(nulo)
nulo<-nulo %>%
rename("pib2010"="nulo")
cons2012<-bind_rows(cons2012, nulo)
graf<-cbind(cons2012, cons_prev)
colnames(graf)<-c("Série Original", "SES")
# Retornando para o formato temporal----
graf_ts<-ts(graf, start=c(2012,1), frequency = 12)
# Plotar um único gráfico----
xyplot(graf_ts, superpose = TRUE, lwd = 2)
rm(list=ls())
#Diretório
setwd("C:/Users/Caio Azevedo/Documents/Documentos Caio/Github/Series-Temporais/Figuras")
# Carregando pacotes a serem utilizados
library(forecast)
library(dplyr)
library(lattice)
library(xtable)
library(stargazer)
# Exportando os dados disponíveis no GitHub
site <- "https://raw.githubusercontent.com/caio-azevedo/Series-Temporais/master/data/energia.csv"
dados<- read.table(site, header=T, sep=";", dec = ",",
col.names = c("data", "cons", ""))
# Configurando os dados para o formato de séries temporais
attach(dados)
cons76 <-ts(cons, start=c(1976,1), frequency = 12)
plot(cons76)
dev.copy(pdf,"cons76.pdf")
dev.off()
# Fazendo um recorte de tempo nos dados a partir de 2012
cons2012<- window(cons76, start=2012)
# Plotando o gráfico da série
plot(cons2012)
dev.copy(pdf,"cons2012.pdf")
dev.off()
# Aplicando a Suavização de Holt - Winters erros aditivos----
cons_ses<-ses(cons2012, level = 95, h=10)
plot(cons_ses)
cons_prev<- cons_ses[["model"]][["fitted"]]
cons_prev<-data.frame(cons_prev)
View(cons_prev)
x<-data.frame(cons_ses, row.names = c(1:10))
x<-x %>%
select("Point.Forecast") %>%
rename("cons_prev"="Point.Forecast")
cons_prev<-bind_rows(cons_prev, x)
View(cons_prev)
cons2012<-data.frame(cons2012)
# é necessário criar um vetor nulo pra completar a série original
# a repetição é de acordo com o número de períodos a ser previsto
nulo<-c(rep(NA,10))
nulo<-data.frame(nulo)
nulo<-nulo %>%
rename("cons2012"="nulo")
cons2012<-bind_rows(cons2012, nulo)
View(cons2012)
graf<-cbind(cons2012, cons_prev)
colnames(graf)<-c("Série Original", "SES")
View(graf)
graf_ts<-ts(graf, start=c(2012,1), frequency = 12)
# Plotar um único gráfico----
xyplot(graf_ts, superpose = TRUE, lwd = 2)
dev.copy(pdf,"cons.pdf")
dev.off()
